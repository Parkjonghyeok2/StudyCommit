BufferedReader = Scanner와 유사.

​Bufferedwriter = System.out.println();과 유사

​둘은 모두 기존에 쓰던 scanner와 System.out.println()보다 속도 측면에서 훨씬 빠르기 때문에

(입력된 데이터가 바로 전달되지 않고 버퍼를 거쳐 전달되므로 데이터 처리 효율성을 높임)

많은 양의 데이터를 처리할 때 유리하다. 

​

하지만 그에 비해 BufferdReader은 Enter만 경계로 인식하고 받은 데이터가
String으로 고정되기 때문에 입력받은 데이터를 가공하는 작업이 필요한 경우가 많다. 

​
BufferedReader
	readLine()을 사용하여 데이터를 라인 단위로 읽을 수 있다.

	BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); //선언
	String s = br.readLine();
	int i = Integer.paresInt(br.readLine()); //정수형으로 변환 - 만약 정수형으로 쓰고 싶으면
	//즉 반드시 형변환이 필요하다

	
	*데이터 가공 (BufferedReader를 통해 읽어온 데이터는 개행문자 단위(Line단위)로 나누어진다.
	만약 이를 공백 단위로 데이터를 가공하고자 하면 따로 다시 작업을 한다
	
	BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); //선언
	StringTokenizer st = new StringToenizer(br.readLine()); //공백 단위로 구분함
	int N = Integer.parseInt(st.nextToken());
	int i = Integer.paresInt(br.readLine()); 
	




BufferedWriter
	문자열출력과 개행을 동시해 하는 println이 없기 때문에 따로 "\n" 이나 newLine을 해준다
	
	BufferedWriter bw = new GufferedWriter(new FileWriter("bufferdeWriter.txt"));
	bw.write('hello\n"); //출력
	bw.newLine(); //개행 즉 엔터 역할
	bw.write("I am writing\n"); //개행과 함께 출력
	bw.flush(); //남아 있는 데이터를 모두 출력
	bw.close(); // 스트림



