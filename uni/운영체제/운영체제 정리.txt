ROM / RAM

ROM : 비휘발성 메모리로 부팅 될 때 운영체제가 필요로 하는 하드웨어를 점검하고 OS를 주기억장치에 업로드하는 등 부팅의 역할을 수행한다
저장된 데이터를 단지 읽을 수 만 있는 기억 장치(Read-Only)

RAM : 휘발성 메모리로 CPU와 상호작용을 위한 메모리이다
컴퓨터 시스템이 수행되는 동안 프로그램과 데이터를 기억하고 있는 장치이다 


운영체제란
	컴퓨터와 사용자간의 매개체 역할로써
	컴퓨터 자원들을 관리하는 시스템 소프트웨어이다.
	
	역할로써는 하드웨어와 응용 소프트웨어간의 인터페이스 역할을 하며 CPU와 메모리 	같은 컴퓨터 자원을 관리한다
	
	목적
	편리성 : 사용자가 편리하게 쓸 수 있게 구현
	효율성 : 성능 향상을 위한 설계
		1. 처리능력 증대 - CPU 유휴시간을 줄인 다중프로그램 도입
		2. 응답시간 단축 - 다중프로그램, 시분할시스템 등
		3. 사용 가능도 증대 - 한정된 자원을 신속하고 충분히 처리하는 정도 (스케줄					링 기법)
		4. 신뢰도 향상 - 정확하게 작동하는 지

	기능 : 프로그램을 실행하는데 필요한 자원을 제공 및 관리
	프로세스 관리, 메모리 관리, 보조기억장치 관리, 장치 관리, 파일관리, 기타


	구성 
	커널 : OS의 핵심 부분(부팅 후 메모리에 상주한다)
		자원관리 기능을 담당
	유틸리티 프로그램 : 비상주 프로그램 (주로 사용자 인터페이스)

운영체제 발달 요인
	하드웨어 : 장치들의 성능과 크기 등의 향상
	소프트웨어 : 큰 메모리 처리를 요하는 프로그램 요구사항 증가


시스템 소프트웨어
	컴퓨터 하드웨어 시스템을 제어하고 운영하는 프로그램
	프로그램 개발 시 여러 시스템 소프트웨어가 필요하다.
		종류
		입출력 제어 프로그램
		컴파일러 : 고수준 언어를 저수준언어로 번역하여 컴퓨터가 처리할 수 있게 			해줌
	
		어셈블러 : 저수준 언어를 어느정도 기호화 표현을 한 중간수준의 언어
	
		링커 : 어셈블러로 인해 만들어진 여러개의 목적 모듈이 보조 기억 장치에 저			장되는데 실행할 때 서로 묶어 적재모듈로 만든 하나의 실행파일로 만든다 
		
		로더 : 보조기억장치에 있는 데이터를 주기억장치로 옮겨놓는 역할
		
		로더의 기능
		할당 : 실행 프로그램을 실행시키기 위해 기억장치 내에 옮겨 놓는 역할 
		
		연결(링킹) : 프로그램 호출 시 할당된 기억장소의 시작주소를 호출한 부분에 			등록하여 연결하는 기능
		
		재배치 : 보조기억장치에 할당된 기억장소를 실제주소로 배치
		
		적재  : 기억공간에 실제로 옮기는 기능



컴퓨터의 역사
	초기  NO-OS
		운영체제가 없던 시기 프로그래머가 하드웨어를 직접 조작해 작업(Job) 실행		을 위한 여러단계를 수작업으로 진행 - 실행을 위한 준비시간이 김
	
	상주모니터의 출현
		유휴시간의 방지를 위하여 다른 작업으로 자동적으로 진행되는 OS를 개발하		여 주기억공간에 상주시키는 프로그램 필요성이 대두됨

	버퍼링과 스풀링 등장
	버퍼링 : CPU의 유휴시간을 최소하 하기 위해 RAM에 버퍼라는 메모리 블럭을 할당하		여 유휴시간 최소화
	스풀링 : 입출력 장치들의 데이터를 디스크에 일부 모아두었다가 CPU에서 한꺼번에 처		리하는 알고리즘

	다중 프로그램
	CPU유휴시간 증가와 주메모리 성능향상으로 인해 I/O 작업속도 저하
	RAM안에 여러프로그램을 저장해두오 하나의 작업이 I/O하는 동안 CPU가 다른 프로그		램을 프로세스 함


유형별 운영 기법
	일괄처리 시스템 (1세대)
	일정기간 동안 데이터를 모아 한꺼번에 처리 / 응답(반환)시간이 늦음
	I/O처리중 CPU 유휴시간 발생

	다중 프로그램 (2세대) 
	하나의 CPU와 주기억장치를 이용해 여러 프로그램을 동시에 처리한느 방식
	CPU 유휴시간 보완을 위해 CPU에 작업을 다중으로 부여

	시분할 시스템 (2세대)
	여러 사용자가 동시에 수행하는 느낌을 들게함
	공평하게 TimeSlice를 부여하여 RR(Round Robin)을 이용함

	다중 처리 시스템 (2세대)
	여러개의 CPU가 하나의 주기억장치를 이용하여 여러개의 프로그램을 동시에 처리
	신뢰성과 안정성을 높이기 위해 (하나의 CPU가 고장나도 다른 CPU를 처리해 처리 가능 
	ex. 은행 업무

	실시간 처리 시스템 
	데이터 발생 즉시 결과를 산출하는 방식 ex. 은행 이체, 좌석 예약
	
	다중 모드 처리 시스템(2세대)
	일괄 처리, 시분할, 다중 처리, 실시간 처리 시스템을 한 시스템에서 모두 제공

	분산 처리 시스템 (3세대)
	여러개의 컴퓨터를 통신회선으로 연결하여 하나의 작업을 처리함
	컴퓨터들은 고유의 운영체제와 CPU,메모리를 가지고 있음


CPU 레지스터 종류
	IR : 다음으로 처리 해야할 명령어를 임시 저장
	PC :다음 프로세스의 주소를 가지고 있음 

프로세스 란
	PCB를 가진 프로그램으로써 주기억장치에 있는 커널(OS)에 의해 저장되고 관리된다.
	처리해야될 작업임
	CPU의 PC에 할당됨

	PCB란 프로세스 제어블럭 으로써 각 프로세스들에 대한 정보가 저장 되어 있음
	시스템이 최대로 수용할 수 있는 프로세스의 수에 따라 공간이 할당된다. 
	PCB의 집합을 Queue라고 부른다

	PCB에는 
	프로세스 상태, 이름, 우선순위, 스케줄링, CPU 레지스터들의 상태, 주기억장치 관리정	보, 입출력 상태 정보들이 저장되어 있음


프로세스 상태 종류
	제출 : 작업 처리를 위해 사용자가 작업을 제출한 상태
	접수 : 제출된 작업이 스풀공간인 디스크의 할당위치에 저장된 상태
		디스크에 있는 상태로 장기 스케줄러(JOB 스케줄러)에 의해 수행됨
	준비 : 디스크에 있는 프로세스를 RAM으로 배치하는 상태
		준비큐에 PCB를 할당받고 기다리는 상태임
	실행 : RAM에 있는 프로세스를 CPU에 할당한 상태
		할당시간이 종료되면 준비상태로 전이 (시분할)
		진행 중단이 되면 준비상태로 전이
		입출력 명령이 있으면 대기상태로 전이
	대기 : 실행되고 있던 프로세스에 I/O 요청이나 이벤트로 다시 RAM으로 배치된 상태   
	종료 : 프로세스의 작업이 완료된 상태


프로세스 상태 전이 (단기 스케줄러에 의해 실행됨)
	준비 -> 실행 : 디스패치라고 하며 문맥교환이라고도 한다 할당된 프로세스들의 종류를 			바꾸거나 프로세스를 할당하는 전이 상태이다
	실행 -> 대기 : block이라고 함
		비선점 스케줄링 방식
	실행 -> 준비 : timer runout
		선점 (시분할 프로그램 방식)
	대기 -> 준비 : wakeup 
		선점
	실행 -> 종료 : terminnate
		비선점 

프로세스 스케줄링
	프로세스가 필요로 하는 여러 자원을 해당 프로세스에게 할당하는 작업
	작업 큐, 준비 큐, 장치 큐가 있다
	성능 기준
	CPU처리율
	응답시간 : 작업 요청시 반응 하는 시간
	반환시간 : 메모리에 들어간 시간 + 처리된 시간 + 대기 시간 + 입출력 시간 
	대기시간 : 실행되기전 준비큐에 있는 시간

	스케줄러의 종류
	장기 스케줄러(Job 스케줄러) 
		사용자 요청에 의해 디스크에 있는 프로그램을 RAM으로 적재하는 스케줄러
		처리 빈도가 적으며, 일괄 처리 방식으로 처리함
	중기 스케줄러
		어떤 프로세스들이 CPU를 할당 받을 것인가를 결정하는 스케줄러
		오버헤드 발생 시 연기할 프로세스를 우선순위에 따라 결정하여
		RAM -> 디스크 스풀 영역으로 옮김
	단기 스케줄러 (프로세스 스케줄러)
		RAM과 CPU사이의 상태 전이를 담당하며 실행빈도가 많고 처리속도가 빠름


	
스케줄링 종류
	비선점 스케줄링 : CPU에 프로세스가 할당되어 있으면 다른 프로세스가 할당 불가
	1. FCFS == FIFO
		준비큐에 처음 들어온 프로세스가 처음으로 할당받는다
		단점 : 공평성은 유지되지만 작업의 우선순위가 없어 성능이 떨어짐
	
	2. SJF (Shortest Job First)
		FCFS의 단점인 성능 향상을 위해 개발
		작은 실행시간을 가진 프로세스가 먼저 할당됨 (최소작업 우선 스케줄링
		공평성에 어긋남 
		(작업시간이 긴 프로세스 들은 한없이 뒤로 밀리는 무한연기 현상 발생)
	
	3. HRN (Highest Response-ratio Next)
		SJF 단점을 보완하여 우선순위 수식의 결과값이 큰 프로세스를 먼저 처리
		우선순위식 = 반환시간 / 실행시간
	
	4. Deadline 기한부
		프로세스에게 일정한 시간을 주어 그 시간안에 프로세스를 완료하게 함
		시간 내에 종료되면 효율성이 높다
		하지만 프로세스에게 할당할 정확한 시간을 추정해야함
		여러 프로세스가 실행되야 할 때 스케줄링이 복잡해지며, 
		오버헤드 발생할 확률이 높음
	
	5. 우선순위 (Priority)
		준비 큐에서 기다리는 프로세스들을 우선순위를 부여하여 차례대로 수행
		보통 우선순위 값이 높은 프로세스가 우선순위가 높다
		만약 !! 우선순위가 동일할 경우 FCFS로 실행 (무조건)
		이거또한 무한 연기 또는 기아상태 발생
		해결법으로 Aging 기법
			무한 연기 프로세스를 위해 다른 프로세스들을 한단계씩 양보함
			또는 기다린 시간에 비례하여 일정시간이 지나면 한단계식 우선순			위를 높인다

	선점 스케줄링 : CPU에 프로세스가 할당되어 있지만 다른 프로세스가 차지 할 수 있음
	
	1. RR (Round Robin) == FCFS + 선점 형태
		FCFS알고리즘을 선점형태로 변형한 기법 -> RR돌리는 순서는 FCFS로 지정
	
	2. SRT (Shortest Remaining Time) == SJF + 선점형태
		SJF를 선점형태로 변형한 기법으로
		현재 시간 기준으로 가장 짧은 실행시간을 가진 프로세스가 CPU를 차지한다
		각 프로세스실행시간을 추적하여 보유하고 있어야하므로 문맥교환 증가와
		그로 인한 오버헤드가 증가한다.	
	
	3. 선점우선순위(Preemptive Priority)
		준비 상태 큐에서  프로세스들 중 가장 높은 우선순위를 가진 프로세스에게
		CPU 할당
		우선순위에는 내부적, 외부적 두종류가 존재한다
		내부적 : 제한시간, 기억장소 요청량, 사용 파일 수, 평균 프로세스 버스트 등
		외부적 : 프로세스 중요성, 정잭적 요인 등
	
	4.  다단계 큐(MQ : Multi - level Queue)
		작업들을 여러그룹으로 나누어 여러 개의 준비상태 큐에 저장하고 이용하는 		기법
		준비상태 큐별로 스케줄링 기법이 독자적이고 특성에 따라 스케줄링 기법이 		정해진다
		특정 준비 큐에 프로세스가 할당되어 PCB가 생성되면, 다른 준비큐로 바꿀 		수 없다.
		응답이 빠르지만, 여러 준비큐와 스케줄링 알고리즘 때문에 오버헤드 발생
		및 무한 대기상태 발생
	
	5. 다단계 피드백 큐(MFQ : Multi-level Feedback Queue)
		다단계 큐에 융통성을 부여한 스케줄링 : 다른 준비큐로 이동가능
		각 준비 상태 큐마다 시간 할당량을 부여해 기아상태 해결
		하위 단계로 갈수록 Time Slice를 길게 부여함
		마지막 단계의 준비큐는 작업이 완료 될때가지 무조건 RR 기법 사용
		현시점 가장 일반적인 CPU알고리즘 스케줄링
	
	
주기억장치 개념
	프로그램과 데이터는 직접 실행되거나 참조될 때 주기억장치내에서 있어야함
	기억장치는 프로그램을 실행하는 중요 공간이다
	기억장치는 프로세스들을 관리하기 위해 메모리 할당, 제거, 보호하는 활동을 한다
	여러 정책을 수립해 관리한다

	기억장치 관리 정책 (자원 할당 기법) - 한정된 주기억장치 공간을 효율적 사용 위해
	인출(fetch) : 주기억장치에 적재할 다음 데이터를 적재할 시기를 결정
		요구 인출 기법, 예상 인출 기법
	배치 : 주기억장치를 할당 받고자 하는 프로세스에게 할당 공간(메모리 블록)의 위치를 		결정-> 크기에 따라 적절한 위치 배치 (단편화의 크기에 따른 적재결과)
		1. 최초 적합
		2. 최적 적합
		3. 최악 적합
	교체 : 주기억장치 공간 부족 시 어느 프로세스와 교체하여 공간선점을 할지 결정
	할당 : 새로운 프로세스의 주기억장치 할당량 결정


	
	기억장치의 주소 변환 (주소바인딩) 보조기억장치 (논리적 ) -> 주기억장치 (물리적)
	
	기억장치는 주소들의 연속이고, 주소는 프로그래머 관점에서 논리적 / 저장 공간 관점		의 물리적 주소 이렇게 두종류가 있다
	
	논리적 -> 물리적 주소 변환은 기억장치관리자(MMU : 메모리 관리장치)가 담당하고 
	연결해주는 매핑작업을 주소바인딩 이라고 한다

	
	기억장치 관리의 발전
	
	

	