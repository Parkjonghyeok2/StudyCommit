
@RequestBody		// JSON 객체를 서버에서 받기 위해 사용.
			   매개변수에 사용해준다.

@Transactional		// 해당 메소드를 트랜잭션으로 묶어 오류 발생시 
			   메서드 수행 이전 시간으로 롤백시켜준다.


@Entity			// DB의 테이블을 의미
@Id			// PK를 의미
@GeneratedValue		// 영속성을 위한 기본키 설정 전략
	- IDENTITY : Mysql에서 주로 사용. 기본키 생성을 데이터베이스에 위임한다.
	- SEQUENCE : Oracle 에서 주로 사용. 시퀀스를 조회하는 쿼리를 사용한다.
	- TABLE : 모든 DBMS에서 사용. 키 생성 전용 테이블을 만들어 시퀀스 대체.
		성능으로 인해 권장되지 않는다.

@ToString		// (Lombok) ToString.

@Data			// (Lombok) Getter, Setter, ToString 등을 모두 설정
			   엔티티에 사용시 컨트롤러에서 다양한 메서드 사용 가능.

@Autowired		// 스프링이 관리하는 Bean을 자동으로 매핑해줌.

@AllArgsConstructor	// (Lombok) 생성자 효과

@NoArgsConstructor	// (Lombok) 기본 생성자

@Slf4j			// (Lombok) 로깅 기능 추가

@PathVariable		// url 경로상 변수를 설정 가능

@Builder 패턴 		// 빌더 패턴은 생성 패턴 중 하나이다. 또, 생성 패턴은 "인스턴스"를 만드는 절차를 "추상화"하는 패턴이다.
			   생성 패턴을 이용하면, 무엇이 생성되고, 어떻게 결합하는지에 대한 부분을 가려준다.
			   즉, setter로 접근할 수 있는 private 지역 변수들을 객체의 일관성과 불변성을 유지하며 객체생성을 가능하			   게 한다
