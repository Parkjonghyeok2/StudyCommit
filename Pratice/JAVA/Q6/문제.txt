Document Class
- 문서의 이름, 날짜, 내용을 저장
- 문서의 이름, 날짜, 내용은 생성자를 통해 입력 받음
- 문서의 날짜를 입력받지 않는다면(생성자를 통해) 현재의 날짜 입력

- 이름, 날짜, 내용의 getter 생성
- 내용의 setter 생성


DocumentManager Class
- 문서를 저장할 LinkedList 생성
- 메서드의 입력은 매개 변수
makeDocument 메서드
- 이름, 날짜, 내용을 입력 받아 새로운 문서 생성
deletDocument 메서드
- 이름을 입력 받아 내용을 삭제 만약 입력받은 이름이 null이라면 전부 삭제
recontent 메서드
- 이름과 내용을 입력 받아 이름과 동일한 문서의 내용 수정
returnDocument 메서드
- 문서의 이름을 입력받아 해당하는 문서를 반환


Command Class
- 기능은 DocumentManager 호출하여 구현
commandAct 메서드 제네릭으로 만들어보기
- 입력은 매개 변수
1 or make 입력받으면 makeDocument 호출
2 or delet 입력받으면 deletDocument 호출
3 or recontent 입력받으면 reContent 호출
4 or search 입력받으면 searchDocument 호출
makeDocument 메서드
- scanner를 통해 이름, 날짜, 내용을 입력 받아 새로운 문서 생성
deletDocument 메서드
- scanner를 통해 이름을 입력 받아 내용을 삭제
reContent 메서드
- scanner를 통해 이름과 내용을 입력 받아 이름과 동일한 문서의 내용 수정
searchDocument 메서드
- scanner를 통해 문서의 이름을 입력받아 해당하는 문서의 이름, 내용, 날짜
출력 만약 입력을 비워둔다면 모든 문서의 이름, 내용, 날짜 출력



CommandMod Class
setMode 메서드 
- 하나씩 명령어를 처리할지 한번에 명령어를 처리할지 결정
1 하나씩 명령어 처리 defaultCommand 
2 한번에 명령어 처리 SetCommand 
3 종료(프로그램)

defaultCommand 메서드
- 아래 명령어중 하나를 선택해서 종료를 받을때 까지 문서 관리
1. 문서 생성 (make)
2. 문서 삭제 (delet)
3. 문서 수정 (recontect)
4. 문서 검색 (search)
5. 종료
SetCommand 메서드
- 아래 명령어중 하나를 선택해서 종료를 받을때 까지 문서 관리,
명령어를 계속 받아놔서 차례 대로 한번에 처리 또한 명령어를 입력
받을때 마다 현재 쌓여있는 명령어들 출력
1. 문서 생성 (make)
2. 문서 삭제 (delet)
3. 문서 수정 (recontect)
4. 문서 검색 (search)
5. 실행
6. 종료