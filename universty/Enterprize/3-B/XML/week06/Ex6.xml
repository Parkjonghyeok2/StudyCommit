<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">

<!-- Advice 메서드를 포함하는 클래스를 빈으로 등록 -->
	<bean id = "advice" class = "week06.AdviceEx"/>
	<bean id = "pObj" class = "week06.PointcutObj"/>
	<!-- Aspect 설정 : Adivce를 어떤 Pointcut에 적용할 지 설정 -->
	<aop:config>
		<aop:aspect id="aspect1" ref = "advice"> 
			<aop:pointcut id="pointcut1"
			expression="execution(public * week06..*(..))" /> 
			<aop:around method="trace" pointcut-ref="pointcut1"/>
			<!-- args메서드를 사용하여 인자의 이름을 지정하는데, 실제 클래스 매개변수의 변수명과 일치해야한다 -->
			<!-- 여기서 objName은 자바빈으로 지정된 클래스 pObj가 메인에서 실행될 때 사용한 변수명을 사용한다
			시나리오 : 자바빈(pObj)가 메인 실행 -> 자바빈으로 이어진 pObj메서드가 실행 (근데 around 메서드로 인하여 전에 되는 메서드 존재)
			-> around 메서드 중 try 안 메서드 실행 -> after 메서드로 지정된 메서드 실행 -->
			<aop:after pointcut = "args(objName)" method = "argsEx"/>
		</aop:aspect>
	</aop:config>
</beans>
